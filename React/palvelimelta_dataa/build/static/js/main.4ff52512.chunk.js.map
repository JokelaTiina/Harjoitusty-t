{"version":3,"sources":["services/notes.js","App.js","index.js"],"names":["axios","get","then","response","data","newObject","post","id","put","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","Notification","message","className","notesToShow","filter","note","important","Note","toggleImportance","label","content","onClick","map","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","target","type","ReactDOM","render","document","getElementById"],"mappings":"6PA0Be,EAtBA,WAQb,OAPgBA,IAAMC,IAHR,cAUCC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc5B,EAVA,SAAAC,GAEb,OADgBL,IAAMM,KAfR,aAesBD,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ5B,EALA,SAACG,EAAIF,GAElB,OADgBL,IAAMQ,IAAN,UApBF,aAoBE,YAAwBD,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SChBrCK,EAAS,WAMb,OACE,yBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,KAIR,6BACA,uGA4HSC,EAvHH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,OAEcF,mBAAS,IAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGcJ,oBAAS,GAHvB,mBAGTK,EAHS,KAGAC,EAHA,OAIwBN,mBAAS,0BAJjC,mBAITO,EAJS,KAIKC,EAJL,KAMhBC,qBAAU,WACRC,IAEKvB,MAAK,SAAAwB,GACNT,EAASS,QAEZ,IAEH,IAoBMC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAe,OAAZA,EACM,KAIP,yBAAKC,UAAU,SACZD,IAsBDE,EAAcV,EAChBJ,EACAA,EAAMe,QAAO,SAAAC,GAAI,OAAuB,IAAnBA,EAAKC,aAgBxBC,EAAO,SAAC,GAAgC,IAA9BF,EAA6B,EAA7BA,KAAMG,EAAuB,EAAvBA,iBACdC,EAAQJ,EAAKC,UACf,qBAAuB,iBAEzB,OACE,wBAAIJ,UAAU,QACXG,EAAKK,QACN,4BAAQC,QAASH,GAAmBC,KAK5C,OACE,6BACE,qCACA,kBAACT,EAAD,CAAcC,QAASN,IAEvB,6BACE,4BAAQgB,QAAS,kBAAMjB,GAAYD,KAAnC,QACQA,EAAU,YAAc,QAGlC,4BAnCeU,EAAYS,KAAI,SAAAP,GAAI,OACrC,kBAACE,EAAD,CACEM,IAAKR,EAAKzB,GACVyB,KAAMA,EACNG,iBAAoB,kBA1DG,SAAA5B,GACzB,IAAMyB,EAAOhB,EAAMyB,MAAK,SAAAC,GAAC,OAAIA,EAAEnC,KAAOA,KAChCoC,EAAW,eAAQX,EAAR,CAAcC,WAAYD,EAAKC,YAEhDR,EACUkB,GACPzC,MAAK,SAAA0C,GACJ3B,EAASD,EAAMuB,KAAI,SAAAP,GAAI,OAAIA,EAAKzB,KAAOA,EAAKyB,EAAOY,SAEtDC,OAAM,SAAAC,GACLvB,EAAgB,SAAD,OACJS,EAAKK,QADD,uCAGfU,YAAW,WACTxB,EAAgB,QACf,KACHN,EAASD,EAAMe,QAAO,SAAAW,GAAC,OAAIA,EAAEnC,KAAOA,SA0CVyC,CAAmBhB,EAAKzB,WAmClD,0BAAM0C,SA7DM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjBf,QAASnB,EACTmC,MAAM,IAAIC,MAAOC,cACjBtB,UAAWuB,KAAKC,SAAW,IAG7BhC,EACU2B,GACPlD,MAAK,SAAA0C,GACJ3B,EAASD,EAAM0C,OAAOd,IACtBzB,EAAW,SAkDX,2BACEwC,MAAOzC,EACP0C,SAlCiB,SAACV,GAExB/B,EAAW+B,EAAMW,OAAOF,UAkCpB,4BAAQG,KAAK,UAAb,SAEF,kBAAC,EAAD,Q,MClINC,IAASC,OACL,kBAAC,EAAD,MACAC,SAASC,eAAe,W","file":"static/js/main.4ff52512.chunk.js","sourcesContent":["import axios from 'axios'\r\n// const baseUrl = 'http://localhost:3001/api/notes'\r\nconst baseUrl = '/api/notes'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n/*   const nonExisting = {\r\n    id: 10000,\r\n    content: 'This note is not saved to server',\r\n    date: '2019-05-30T17:30:31.098Z',\r\n    important: true,\r\n  } */\r\n  return request.then(response => response.data)\r\n  // return request.then(response => response.data.concat(nonExisting))\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update }\r\n\r\n","// koulun esimerkki\n\nimport React, { useState, useEffect } from 'react';\n//import axios from 'axios'\nimport noteService from './services/notes'\n//import Note from './components/Note'\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2019</em>\n    </div>\n  )\n}\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    noteService\n      .getAll()\n        .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from server!`\n      )\n      setTimeout(() => {\n        setErrorMessage(null)\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const Notification = ({ message }) => {\n    if(message === null) {\n      return null\n    }\n\n    return (\n      <div className=\"error\">\n        {message}\n      </div>\n    )\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n    \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n  \n  //Jos tilan arvo showAll on epätosi, muuttuja notesToShow:n arvoksi tulee vain tärkeät muistiinpanot\n  const notesToShow = showAll \n    ? notes \n    : notes.filter(note => note.important === true)\n   // notes.filter(note => note.important) Lyhyemmässä muodossa  \n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance = {() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const handleNoteChange = (event) => {\n    //console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const Note = ({ note, toggleImportance }) => {\n    const label = note.important\n      ? 'make not important' : 'make important'\n\n      return (\n        <li className='note'>\n          {note.content}\n          <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      \n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}  \n        </button>\n      </div>\n      <ul>\n        {rows()} \n      </ul>\n\n      <form onSubmit={addNote}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange}  \n        />\n        <button type=\"submit\">save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App\n\n/* import React, { useState, useEffect } from 'react';\n//import axios from 'axios'\nimport noteService from './services/notes'\n//import Note from './components/Note'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    noteService\n      .getAll()\n        .then(initialNotes => {\n        setNotes(initialNotes)\n      })\n  }, [])\n\n  const toggleImportanceOf = id => {\n    const note = notes.find(n => n.id === id)\n    const changedNote = { ...note, important: !note.important }\n\n    noteService\n      .update(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      alert(\n        `Something with '${note.content}' went wrong!`\n      )\n      setNotes(notes.filter(n => n.id !== id))\n    })\n  }\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n    \n    noteService\n      .create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote))\n        setNewNote('')\n      })\n  }\n  \n  //Jos tilan arvo showAll on epätosi, muuttuja notesToShow:n arvoksi tulee vain tärkeät muistiinpanot\n  const notesToShow = showAll \n    ? notes \n    : notes.filter(note => note.important === true)\n   // notes.filter(note => note.important) Lyhyemmässä muodossa  \n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n      toggleImportance = {() => toggleImportanceOf(note.id)}\n    />\n  )\n\n  const handleNoteChange = (event) => {\n    //console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  const Note = ({ note, toggleImportance }) => {\n    const label = note.important\n      ? 'make not important' : 'make important'\n\n      return (\n        <li className='note'>\n          {note.content}\n          <button onClick={toggleImportance}>{label}</button>\n        </li>\n    )\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}  \n        </button>\n      </div>\n      <ul>\n        {rows()} \n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange}  \n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App */\n\n\n\n\n/* import React, { useState, useEffect } from 'react';\nimport axios from 'axios'\nimport Note from './components/Note'\n\nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('')\n  const [showAll, setShowAll] = useState(true)\n\n  useEffect(() => {\n    console.log('effect')\n    axios\n      .get('http://localhost:3001/notes')\n      .then(response => {\n        console.log('promise fulfilled')\n        setNotes(response.data)\n      })\n  }, [])\n  console.log('render', notes.length, 'notes')\n\n  //Jos tilan arvo showAll on epätosi, muuttuja notesToShow:n arvoksi tulee vain tärkeät muistiinpanot\n  const notesToShow = showAll \n    ? notes \n    : notes.filter(note => note.important === true)\n   // notes.filter(note => note.important) Lyhyemmässä muodossa\n\n  const rows = () => notesToShow.map(note =>\n    <Note\n      key={note.id}\n      note={note}\n    />\n  )\n\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n      id: notes.length + 1,\n    }\n    \n    setNotes(notes.concat(noteObject))\n    setNewNote('can add a new note now!')\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all'}  \n        </button>\n      </div>\n      <ul>\n        {rows()}\n      </ul>\n      <form onSubmit={addNote}>\n        <input \n          value={newNote} \n          onChange={handleNoteChange}  \n        />\n        <button type=\"submit\">save</button>\n      </form>\n    </div>\n  )\n}\n\nexport default App */\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n    <App />, \n    document.getElementById('root')\n    )\n\n\n\n\n\n\n\n\n"],"sourceRoot":""}